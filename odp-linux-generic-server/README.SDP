ODP linux-generic-server
========================

This is an implementation of Linaro OpenDataPlane that has been heavily
modified to allow for writing and porting general purpose server applications
to take advantage of the abstractions that ODP provides, such as an event
scheduler and hardware offload of any part of the API.

New APIs provided
-----------------

The linux-generic-server library provides new APIs that are necessary for
general purpose server applications to leverage ODP as their IO layer and
event infrastructure.  These APIs abstract aware key IO functions like TCP
termination and File IO to abstract ODP events that can then use the basic
infrastructure provided by ODP.  The key takeaway of these new additions to ODP is to
allow applications to leverage the ODP scheduler module to mux events to SoC
cores that are available to do work, and because the ODP scheduler is open
source it can be optimized for the application inside a structured framework
instead of building something from scratch out of epoll() and hints to the
Linux scheduler.

These new APIs are listed as follows with a short description.

1. *Socket IO API*: Provides TCP termination for server apps puts incoming IO
into fixed sized ODP buffers that are accessible via ODP Queues either
directly via polling or through the scheduler.  The Socket IO API also takes
care of enqueuing IO for output via TCP.  The underlying TCP implementation is
implementation defined, for linux-generic-server it is using the Linux stack,
but for other implementations it may be using a custom stack.
2. *Stream Packetizer API*: Provides an API for taking a TCP stream and dividing
it up into the resultant L7 messages of for the server application's messaging
protocol.  Most server message protocols are binary in nature so the initial
support of this API is for a simple binary protocol parser that extracts the
packet payload field from an incoming message and constructs an ODP event with
the full message to then pass to an ODP Queue for dequeuing.
3. *File IO API*: Provides an asynchronous File IO API that uses the
underlying POSIX file read/write routines.  ODP provides a token bucket
algorithm for metering out bandwidth and to prevent starvation of worker
threads spending all their time on File IO.  Currently the asynchrony is
provided by having some threads doing syncrhonous file io while the others are still
processing ODP events.  There is an experimental version of the File IO API
using the Linux AIO facilities for complete asynchronous File IO support but
it is currently has some known bugs.
4. *Epoll API*: Provides and API for manipulating a global epoll file
descriptor that is shared by all event producing fd's in the ODP enabled
application.
5. *Pthread lock API*: Implements the functionality of spinlocks and
ticketlock APIs to use pthread mutexes instead in the case of a non-isolated
application.

This modified ODP API also provides arbritrarily long buffer support
constructed as a list of fixed sized buffer slices to allow for the dynamic
memory demands of server applications, but this is hidden behind the already
existing Buffer and Packet APIs.

Building
========

To build and install the odp-linux-generic-server perform the following steps:
1. ./bootstrap
2. ./configure
3. make
4. sudo make install
